{"meta":{"title":"蜜罐技术研究小组","subtitle":"一个专注于蜜罐技术研究与交流的小站","description":"一个专注于蜜罐技术研究与交流的小站","author":"phantom0301","url":"http://ipot.sec-wiki.com"},"pages":[{"title":"","date":"2017-05-17T08:30:40.097Z","updated":"2017-01-12T10:24:34.000Z","comments":true,"path":"404.html","permalink":"http://ipot.sec-wiki.com/404.html","excerpt":"","text":"404 *{margin:0;padding:0;outline:none;font-family:\\5FAE\\8F6F\\96C5\\9ED1,宋体;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-khtml-user-select:none;user-select:none;cursor:default;font-weight:lighter;} .center{margin:0 auto;} .whole{width:100%;height:100%;line-height:100%;position:fixed;bottom:0;left:0;z-index:-1000;overflow:hidden;} .whole img{width:100%;height:100%;} .mask{width:100%;height:100%;position:absolute;top:0;left:0;background:#000;opacity:0.6;filter:alpha(opacity=60);} .b{width:100%;text-align:center;height:400px;position:absolute;top:50%;margin-top:-230px}.a{width:150px;height:50px;margin-top:30px}.a a{display:block;float:left;width:150px;height:50px;background:#fff;text-align:center;line-height:50px;font-size:18px;border-radius:25px;color:#333}.a a:hover{color:#000;box-shadow:#fff 0 0 20px} p{color:#fff;margin-top:40px;font-size:24px;} #num{margin:0 5px;font-weight:bold;} var num=4; function redirect(){ num--; document.getElementById(\"num\").innerHTML=num; if(num"},{"title":"","date":"2015-08-16T06:58:08.000Z","updated":"2017-05-17T14:07:37.295Z","comments":true,"path":"about/index.html","permalink":"http://ipot.sec-wiki.com/about/index.html","excerpt":"","text":"【理念】iPot提供一个蜜罐相关研究的交流与分享平台，定期收集互联网、学术圈、安全公司与蜜罐相关的研究成果，同时鼓励大家投稿，分享蜜罐研究方面的感悟心得。 iPot为对蜜罐研究感兴趣的初学者一个入门的平台，这里有开源的蜜罐项目、蜜罐论文的解读以及大家分享的蜜罐数据集。 【栏目介绍】 开源项目汇总： 收集蜜罐相关项目，对于开源项目的源代码进行解读。 相关研究文章： 发布个人、组织或公司与蜜罐相关的研究、讨论成果以及相关英文文献的翻译 蜜罐数据共享： 发布蜜罐相关数据集 小站三个栏目都接收大家的投稿，可以通过QQ群联系群主或邮箱进行投稿。 如果你有什么建议（包括栏目的删减、内容的增补），欢迎加入我们的交流群： 蜜罐研究交流群：137407808 联系邮箱： ipot@sec-wiki.com"},{"title":"Archives","date":"2016-08-16T07:00:24.000Z","updated":"2017-01-12T10:24:34.000Z","comments":true,"path":"archives/index.html","permalink":"http://ipot.sec-wiki.com/archives/index.html","excerpt":"","text":""},{"title":"article","date":"2016-08-16T07:00:44.000Z","updated":"2017-05-18T02:34:43.431Z","comments":false,"path":"article/index.html","permalink":"http://ipot.sec-wiki.com/article/index.html","excerpt":"","text":""},{"title":"datasets","date":"2016-08-16T07:00:44.000Z","updated":"2017-05-17T07:27:31.513Z","comments":false,"path":"datasets/index.html","permalink":"http://ipot.sec-wiki.com/datasets/index.html","excerpt":"","text":""},{"title":"papers","date":"2016-08-16T07:00:44.000Z","updated":"2017-05-17T07:27:41.475Z","comments":false,"path":"papers/index.html","permalink":"http://ipot.sec-wiki.com/papers/index.html","excerpt":"","text":""},{"title":"projects","date":"2016-08-16T07:00:44.000Z","updated":"2017-05-17T05:45:41.669Z","comments":false,"path":"projects/index.html","permalink":"http://ipot.sec-wiki.com/projects/index.html","excerpt":"","text":""},{"title":"Tags","date":"2016-08-11T04:12:45.000Z","updated":"2017-01-12T10:24:34.000Z","comments":true,"path":"tags/index.html","permalink":"http://ipot.sec-wiki.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"T-Pot多蜜罐平台：让蜜罐实现更简单","slug":"tpot","date":"2017-05-18T02:33:33.000Z","updated":"2017-05-18T03:31:08.618Z","comments":true,"path":"projects/2017-05-18-tpot.html","link":"","permalink":"http://ipot.sec-wiki.com/projects/2017-05-18-tpot.html","excerpt":"本文作者：失路之人，转载自FreeBuf.comhttp://www.freebuf.com/sectool/134504.html","text":"本文作者：失路之人，转载自FreeBuf.comhttp://www.freebuf.com/sectool/134504.html 这两年蜜罐技术被关注的越来越多，也渐形成低交互、中交互、高交互等交互程度的各类蜜罐，从web业务蜜罐、ssh应用蜜罐、网络协议栈蜜罐到系统主机型蜜罐的各功能型蜜罐。小到一个word文档的蜜标，到一个系统级的服务蜜罐，再到多功能蜜罐组成的蜜网，大到包含流控制重定向分布式蜜网组成的蜜场。 随着虚拟化技术的发展，各种虚拟蜜罐也得到发展，可以通过虚拟机来实现高交互蜜罐，以及通过docker实现的业务型蜜罐，不再像是以前需要昂贵硬件设备的部署支撑，这也大大减少了蜜罐的部署成本，一台主机就可以实现整个集数据控制，数据捕获和数据分析于一体多功能多蜜罐高交互蜜网的体系架构。也已经产生了一些不错的开源蜜罐产品或项目，比如MHN(现代蜜网)、HoneypotProject。 MHN现代蜜网简化了蜜罐的部署，集成了多种蜜罐的安装脚本，可以快速部署、使用，也能够快速的从节点收集数据。国外也有很多公司做基于蜜罐的欺骗技术产品创新。 蜜罐高保真高质量的数据集把安全人员从以前海量日志分析的繁琐过程中解脱出来，对于蜜罐的连接访问都是攻击信息，并且不再像以前的特征分析具有一定的滞后性，可以用于捕获新型的攻击和方法。前段时间作者就通过高交互蜜罐捕获了ssh自动化爆破工具，能够针对整个互联网进行爆破尝试，并能够自动识别某些低交互蜜罐。 现在各功能蜜罐这么多，虽然MHN简化了各蜜罐的部署过程，但还是需要手动安装多个系统sensor来实现多个不同蜜罐。在蜜罐的研究过程中，有没有一个提供能更简单方便的平台实现我们对蜜罐的研究与使用。 这里将介绍一个开源多蜜罐平台T-Pot16.10，安装一次系统，轻松使用里面多种蜜罐， 并且提供良好的可视化。官方英文介绍：https://dtag-[http://dev-sec.github.io/mediator/feature/2016/10/31/t-pot-16.10.html](http://dev-sec.github.io/mediator/feature/2016/10/31/t-pot-16.10.html “http://dev-sec.github.io/mediator/feature/2016/10/31/t-pot-16.10.html“) T-Pot16.10开源多蜜罐平台T-Pot16.10多蜜罐平台直接提供一个系统iso，里面使用docker技术实现多个蜜罐，更加方便的蜜罐研究与数据捕获。下面是刚把它部署到互联网6个小时的情况，先来看看它长什么，有没有使用的欲望。 是不是看到都想感受一下？别激动还是先介绍一下它。 T-Pot16.10 使用Ubuntuserver 16.04 LTS 系统，基于docker 技术提供了下面一些蜜罐容器： Conpot: 低交互工控蜜罐，提供一系列通用工业控制协议, 能够模拟复杂的工控基础设施。 Cowrie: 基于kippo更改的中交互ssh蜜罐, 可以对暴力攻击账号密码等记录，并提供伪造的文件系统环境记录黑客操作行为, 并保存通过wget/curl下载的文件以及通过SFTP、SCP上传的文件。 Dionaea: Dionaea是运行于Linux上的一个应用程序，将程序运行于网络环境下，它开放Internet常见服务的默认端口，当有外来连接时，模拟正常服务给予反馈，同时记录下出入网络数据流。网络数据流经由检测模块检测后按类别进行处理，如果有 shellcode 则进行仿真执行；程序会自动下载 shellcode 中指定或后续攻击命令指定下载的恶意文件。 Elasticpot: 模拟elastcisearch RCE漏洞的蜜罐，通过伪造函数在/,/_search, /_nodes的请求上回应脆弱ES实例的JSON格式消息。 Emobility: 在T-Pot中使用的高交互蜜罐容器， 旨在收集针对下一代交通基础设施的攻击动机和方法。Emobility蜜网包含一个中央收费系统，几个收费点，模拟用户的事务。一旦攻击者访问中控系统web界面，监控并处理运行收费交易，并与收费点交互。除此之外，在随机时间，黑客可能与正在收取车辆费用的用户进行交互。 Glastopf: 低交互型Web应用蜜罐, Glastopf蜜罐它能够模拟成千上万的web漏洞，针对攻击的不同攻击手段来回应攻击者，然后从对目标Web应用程序的攻击过程中收集数据。它的目标是针对自动化漏洞扫描/利用工具，通过对漏洞利用方式进行归类，针对某一类的利用方式返回对应的合理结果，以此实现低交互。 Honeytrap: 观察针对TCP或UDP服务的攻击，作为一个守护程序模拟一些知名的服务，并能够分析攻击字符串，执行相应的下载文件指令。 Conpot: 低交互工控蜜罐，提供一系列通用工业控制协议, 能够模拟复杂的工控基础设施。 Cowrie: 基于kippo更改的中交互ssh蜜罐, 可以对暴力攻击账号密码等记录，并提供伪造的文件系统环境记录黑客操作行为, 并保存通过wget/curl下载的文件以及通过SFTP、SCP上传的文件。 Dionaea: Dionaea是运行于Linux上的一个应用程序，将程序运行于网络环境下，它开放Internet常见服务的默认端口，当有外来连接时，模拟正常服务给予反馈，同时记录下出入网络数据流。网络数据流经由检测模块检测后按类别进行处理，如果有 shellcode 则进行仿真执行；程序会自动下载 shellcode 中指定或后续攻击命令指定下载的恶意文件。 Elasticpot: 模拟elastcisearch RCE漏洞的蜜罐，通过伪造函数在/,/_search, /_nodes的请求上回应脆弱ES实例的JSON格式消息。 Emobility: 在T-Pot中使用的高交互蜜罐容器， 旨在收集针对下一代交通基础设施的攻击动机和方法。Emobility蜜网包含一个中央收费系统，几个收费点，模拟用户的事务。一旦攻击者访问中控系统web界面，监控并处理运行收费交易，并与收费点交互。除此之外，在随机时间，黑客可能与正在收取车辆费用的用户进行交互。 Glastopf: 低交互型Web应用蜜罐, Glastopf蜜罐它能够模拟成千上万的web漏洞，针对攻击的不同攻击手段来回应攻击者，然后从对目标Web应用程序的攻击过程中收集数据。它的目标是针对自动化漏洞扫描/利用工具，通过对漏洞利用方式进行归类，针对某一类的利用方式返回对应的合理结果，以此实现低交互。 Honeytrap: 观察针对TCP或UDP服务的攻击，作为一个守护程序模拟一些知名的服务，并能够分析攻击字符串，执行相应的下载文件指令。 在这个平台上，使用了下面的这些工具： ELK: 优雅地可视化T-Pot捕获到的攻击事件 Elasticsearch-head: 一个web前端来浏览和操作ElasticSearch集群 Netdata: 实时性能监控 Portainer: docker的web操作界面 Suricate: 开源的网络安全威胁检测引擎。 Wetty: web界面的ssh客户端 T-Pot 是基于Ubuntu server 16.04TLS 的网络安装，因此安装过程中一定需要保证联网。这些蜜罐守护程序或者其他组件都通过docker虚拟化技术提供。这样可以使我们在一个网卡上运行多个蜜罐系统，并且整个系统更好维护。这些蜜罐程序封装在docker容器中提供了良好的隔离环境并且更容易更新。 这些事件可以通过数据分析工具ewsposter进行关联，也支持蜜网项目hpfeeds数据分享。 T-Pot蜜罐平台结构图： 在docker中的所有数据是隔离里，一旦docker容器崩溃，docker容器环境产生的所有数据都会消失并重启一个新的docker实例。因此，对于有些数据需要永久保存，例如配置文件，在主机上有个永久存储目录/data/， 在系统或者容器重启后都能持续有效。重要的日志数据也通过docker 指定vulume选项存储在容器外的主机文件系统/data/中， 容器里的应用程序能够将日志记录到该目录下。 该平台需要满足硬件要求： T-Pot 安装需要至少4G 内存， 64G 磁盘空间， 并且联网。 该系统安装步骤： 1.下载 top.iso 或者自己创建操作系统环境。 2.安装到联网的VM或者物理机上。安装过程跟普通安装Ubuntu 过程一样， 其中需要为tsec用户设置密码。 3.正常安装系统后，第一次启动系统时将选择安装类型，此时将根据选择下载安装相应容器服务。 有4种安装类型，不同安装类型需要的满足要求不一样， 我们这里选典型T-Pot安装。 1）T-Pot Installation (Cowrie, Dionaea, ElasticPot, Glastopf, Honeytrap, ELK, Suricata+P0f &amp; Tools) 2）Sensor Installation (Cowrie, Dionaea, ElasticPot, Glastopf, Honeytrap) 3）Industrial Installation (ConPot, eMobility, ELK, Suricata+P0f &amp; Tools) 4）Everything Installation (Everything, all of the above) 后面设置web 账号密码，再填写一些相关信息，自动完成docker镜像安装下载，安装成功后重新启动系统进入如下页面： 其中红色的为公网ip地址。 可能在安装过程中由于源的原因或者网络不稳定造成安装失败，这时后面可以登录到系统，用户名为tsec, 密码为安装系统时设置的密码， 进行sudo su 操作提升权限，手动执行/root/install.sh的安装脚本， 脚本检测出不是第一次安装将自动终止，这是需要清除一下文件/root/install.err, /root/install.log以及后面的错误提醒，也可以根据实际情况注释掉脚本已经完成的工作， 只继续进行中断未完成的命令。 4.正常安装系统后，第一次启动系统时将选择安装类型，此时将根据选择下载安装相应容器服务。 通过浏览器访问https://ip:64297访问T-Pot控制面板。通过安装时创建的web 账户密码验证登录。 前面我们已经将各攻击事件通过Kibana面板展示出来了， 我们也可以根据自己的需要设计这些面板可视化展示。 这里为了捕获到攻击，需要将T-Pot平台放置在互联网上，否则捕获不到任何攻击。我这里通过在路由器上设置DMZ将T-Pot放到互联网上。如果你是路由器做一个NAT转换来实现的话，这里需要把这些端口做NAT转换。 T-Pot平台不仅提供了蜜罐数据捕获，还有强大的ELK进行数据处理分析， 还能够处理Elk集群，把T-Pot中集成的多蜜罐可以分布式部署在多个系统上进行数据捕获并统一提供可视化分析展示。 还提供docker的web控制界面，直接可以通过web界面来管理控制我们的各个蜜罐容器。也能够根据需要设计自己的容器蜜罐或容器服务。 还提供了Web ssh 客户端，通过web控制台直接就登录了系统进行操作了，系统实际的22端口 ssh服务其实是一个cowrie蜜罐。 这样我们通过控制台就能方便的登录到实际系统， 设计方便。 还有强大的系统性能监控平台，实时监控主机系统和各容器资源使用情况。 你也可以使用ISO Creator 来创建你自己的ISO安装镜像。 创建镜像要求： Ubuntu 16.04 LTS 或者更新的系统作为主机系统，其他系统没有测试，至少4G内存，32G磁盘空间。 创建ISO镜像： 克隆仓库并进入目录 git clone https://github.com/dtag-dev-sec/tpotce.git cd tpotce 调用脚本来建立ISO镜像， 这个脚本将下载安装一些必须的依赖包。它将下载T-Pot基于的ubuntu网络安装镜像（大约50M）. sudo./makeiso.sh 成功后你将在目录下发现tpot.iso和tpot.sha256两个文件。 现在可以方便的玩蜜罐了。前段时间自己也封装了一些docker高交互蜜罐容器，现在可以方便地集成到T-Pot平台上了， 让蜜罐部署更简单， 功能更丰富。","categories":[{"name":"projects","slug":"projects","permalink":"http://ipot.sec-wiki.com/categories/projects/"}],"tags":[{"name":"蜜罐","slug":"蜜罐","permalink":"http://ipot.sec-wiki.com/tags/蜜罐/"},{"name":"T-Pot","slug":"T-Pot","permalink":"http://ipot.sec-wiki.com/tags/T-Pot/"},{"name":"Docker","slug":"Docker","permalink":"http://ipot.sec-wiki.com/tags/Docker/"}]},{"title":"MHN开源蜜罐项目学习笔记（一）HPFEEDS协议","slug":"hpfeeds","date":"2016-02-19T09:13:55.000Z","updated":"2017-05-18T03:31:21.879Z","comments":true,"path":"article/2016-02-19-hpfeeds.html","link":"","permalink":"http://ipot.sec-wiki.com/article/2016-02-19-hpfeeds.html","excerpt":"Hpfeeds和蜜罐是一对好搭档，想要完全掌握一个分布式蜜罐的信息传递，就来了解Hpfeeds协议吧！","text":"Hpfeeds和蜜罐是一对好搭档，想要完全掌握一个分布式蜜罐的信息传递，就来了解Hpfeeds协议吧！ 0x00 hpfeeds协议是什么？feeds，供稿，原始数据。 hpfeeds是一个轻量级的验证发布-订阅协议(authenticated publish-subscribe protocol)。 轻量级好理解，就是代码量相对较少，功能相对不复杂。那什么是发布-订阅协议呢？订阅发布协议定义了一种一对多的依赖关系，让多个订阅者对象同时监听某一个主题对象。这个主题对象在自身状态变化时，会通知所有订阅者对象，使它们能够自动更新自己的状态。它是为了解决这样一种情况的发生，一个对象的改变需要同时改变其他对象，而且它不知道具体有多少对象需要改变。我的理解，这就类似于发传单，目标发送通知，没有指定特定的对象，通知会自动传播，观察者自己决定是否需要看传单，发送者对于传单是否被看一无所知。 详细的发布订阅者介绍可以戳这里： https://msdn.microsoft.com/en-us/library/ff649664.aspx 线路协议组成如下： 首先是消息头：有两个参数，消息总长和消息类型 消息类型有以下几种： error (0): errormessage info (1): server name, nonce auth (2): client id, sha1(nonce+authkey) publish (3): client id, channelname, payload subscribe (4): client id, channelname 数字代表消息类型，而冒号后面的内容则代表后续的消息字段 比如说当消息类型为3，publish时，后面的字段就会有四个： client id的长度 client id channelname的长度 channelname payload 一个完整的消息如下： length | opcode | next | identifier | next | channelname|payload ---------------------------------------------------------------- 85 3 9 b4aa2@hp1 9 mwcapture 137941a3d8589f6728924c08561070bceb5d72b8,http://1.2.3.4/calc.exe 消息有了，整个消息的认证过程就是以下的几个步骤： 服务器为每一个连接生成一个标志 客户端发送id 和 标志+authkey组成的sha1 服务器检查id和sha1 服务器检查数据类型，是要发布还是要订阅 最终实现服务器、发布者、订阅者之间的解耦，彼此之间完全独立，互不干扰。 0x01 为什么要用hpfeeds协议首先，正如以上所说的，整个协议实现了三方的功能独立。使用这种方式降低了应用与业务逻辑之间的耦合，统一一个对外的发布接口，只需要关心监听的类型，不关心监听的具体处理人。只管发，不管到不到。很方便的建立一种一对多的依赖关系。 在当一个对象的改变需要同时改变其他对象，而且它不知道具体有多少对象需要改变时，就可以使用订阅发布模式。 hpfeeds协议希望能够实现一个单一的连线形式，使得每一个人都可以在任何时间以任何语言去订阅发布数据，不同的数据以通道来划分，由通道的使用者来决定数据结构形式。而通道的验证通过authkey来完成，它由两部分组成，ident和secret，相当于身份和密码。密码在hash后和每一个临时连接标志一起发送给服务器，这样保证不会被窃听，所以它可以运行在SSL、TLS下。 优点 1.降低耦合。发布者对于接收者的数量，身份，接收的数据类型一无所知。 2.安全性高。只有消息订阅者之间的单线信息交互，不存在其他程序的信息交换。 3.测试方便。 缺点 性能降低，订阅要进行管理 0x02 如何操作正常安装使用hpfeeds的步骤如下： git clone https://github.com/rep/hpfeeds/ cd hpfeeds python setup.py build python setup.py install 安装成功后，会出现下面几个文件夹。 appsuport：hpfeeds支持的一些蜜罐的应用程序 broker：服务器功能程序集，包括增加用户，服务器运行，查看所有用户信息等 build：一些编译环境 cli：用户程序 example：例程 lib：支持库 使用时先打开broker，运行其中的add_user.py添加用户信息： 根据提示信息，我们添加用户test，密码123456，拥有发布频道1，2，无订阅频道 再添加用户custom，密码123456，拥有订阅频道1，2，无发布频道 现在使用dump_users.py查看刚才创建的用户 如图所示，这里应经可以查看到刚才我们新建的用户了。 接下来，我们打开服务器feedbroker.py 再开启一个新的进程运行cli文件夹里的用户程序hpfeeds-client 先开启订阅者custom，使用1频道 此时，服务器端显示用户登录成功 我们再打开一个新的进程，以发布者test，使用1频道发布“helloworld” 我们可以看到发布者一旦发布完消息后，立即退出进程，并不确认消息是否收到 这时，服务器显示test登录成功 于此同时，订阅者custom成功接收到消息 到此，一次完整的发送、接收消息的流程就走完了。 通过这一过程，我们发现，频道与用户分离，发送和订阅者身份平等，只需订阅者实时监听，发送者可以即时发送即时撤出。 这里是对于hpfeeds协议的简单介绍，下一部分我会从代码的角度进一步分析该协议，并适当对于协议功能进行添加。","categories":[{"name":"article","slug":"article","permalink":"http://ipot.sec-wiki.com/categories/article/"}],"tags":[{"name":"蜜罐","slug":"蜜罐","permalink":"http://ipot.sec-wiki.com/tags/蜜罐/"},{"name":"MHN","slug":"MHN","permalink":"http://ipot.sec-wiki.com/tags/MHN/"},{"name":"hpfeeds","slug":"hpfeeds","permalink":"http://ipot.sec-wiki.com/tags/hpfeeds/"}]}]}